"""
import zipfile

fantasy_zip = zipfile.ZipFile('C:\\Users\\SSH\\Desktop\\python_code\\python\\Center\\Apk_Malware_Crawler\\mal_test.apk')
fantasy_zip.extract('classes.dex', 'C:\\Users\\SSH\\Desktop\\python_code\\python\\Center\\Apk_Malware_Crawler')


fantasy_zip.close()
"""

#-*- coding: utf-8 
import time, array
import cv2
import os
import numpy as np
import codecs
from PIL import Image
import glob
import argparse
import zipfile

def convert_asm_to_images(sourcepath, destpath):
    # 프로그램이 시작 했을 때 Time 정보
    
    # 디렉토리 안에 있는 모든 파일(디렉토리)를 리스트 형태로 가져옴
    files = os.listdir(sourcepath)
    print('Sourcepath :', sourcepath)
    print('Destination path :', destpath)
    print('Conversion begins')
    
    # 이미지 변환 반복문
    for file in files:
        # 문자열의 맨 마지막에 .asm이 있는지 확인하고 있으면 True 없으면 False
        if file.endswith('.xml'):
            # 파일 바이트 조각을 읽어 드릴 때 예기치 않은 충돌을 방지 하기 위해 사용함
            f = codecs.open(sourcepath+'\\'+file, 'rb')
            # 파일의 크기를 알려줌
            ln = os.path.getsize(sourcepath+'\\'+file)
            # 파일의 크기를 0.5로 제곱하여 너비를 정함
            width = int(ln**0.5)
            # 파일을 바이트로 읽어 오기 위해서 기본으로 설정
            a = array.array("B")
            # 파일을 바이트 단위로 읽어옴
            a.frombytes(f.read())
            f.close()
            # 정한 너비로 읽어온 바이트 단위의 파일을 정사각형 형태인 2차원 배열로 만듦 
            g = np.reshape(a[:width*width], (width, width))
            # 양수의 0~255 만큼의 수만 표기함
            g = np.uint8(g)
            # 마지막으로 이미지 생성
            cv2.imwrite(destpath+'\\'+file+'.png', g)
    print('Files converted sucessfully')

def set_img_size(destpath):
    files = glob.glob(destpath+'\\'+'*.png')
    
    for file in files:
        img = cv2.imread(file)
        img_resize = cv2.resize(img, (256, 256), interpolation = cv2.INTER_AREA)
        img = Image.fromarray(img_resize)
        img.save(file)


def extract_dex_file(path):
    os.mkdir(path+'\\'+'xmlfile')
    files = glob.glob(path+'\\'+'*.apk')
    for i,file in enumerate(files):
        try:
            fantasy_zip = zipfile.ZipFile(file)
            fantasy_zip.extract('AndroidManifest.xml',path+'\\'+'xmlfile')
            os.chdir(path+'\\'+'xmlfile')
            os.rename('AndroidManifest.xml',str(i)+'AndroidManifest.xml')
            fantasy_zip.close()
        except:
            pass

    
    



if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument('-d', help=':샘플들이 존재하는 파일 경로')
    parser.add_argument('-s', help=':결과물이 저장될 파일 경로')
    args = parser.parse_args()
    sample_dir = args.d
    result_dir = args.s

    start_time = time.time()
    
    sourcepath = sample_dir

    destpath = result_dir
    extract_dex_file(sourcepath)
    
    convert_asm_to_images(sourcepath+'\\'+'xmlfile', destpath)
    set_img_size(destpath)
    
    print('Time taken to convert the files(in Minutes):', (time.time() - start_time)/3600)