from binhex import hexbin
import time, array
import cv2
import os
import numpy as np
import codecs
from PIL import Image
import glob
import argparse
import zipfile

def combine_binary(i):
    f1 = codecs.open(str(i)+'AndroidManifest.xml','rb')
    f2 = codecs.open(str(i)+'classes.dex','rb')
    ln1 = os.path.getsize(str(i)+'AndroidManifest.xml')
    ln2 = os.path.getsize(str(i)+'classes.dex')
    a1 = array.array("B")
    a2 = array.array("B")
    a1.frombytes(f1.read())
    a2.frombytes(f2.read())
    g1 = (a1)+(a2)
    f0 = codecs.open(str(i)+'Features.bin','wb')
    f0.write(g1)
    return g1

def load_apk_file(path,path2):
    
    files = glob.glob(path+'\\'+'*.apk')
    for i,file in enumerate(files):
        try:
            apk_file = zipfile.ZipFile(file)
            apk_file.extract('AndroidManifest.xml',path2)
            apk_file.extract('classes.dex',path2)
            apk_file.close()
            os.chdir(path2)
            os.rename('AndroidManifest.xml',str(i)+'AndroidManifest.xml')
            os.rename('classes.dex',str(i)+'classes.dex')
            #MANIFEST = codecs.open(str(i)+'AndroidManifest.xml','rb')
            #DEX = codecs.open(str(i)+'classes.dex','rb')
            combine_binary(i)
        except:
            print(file)

def convert_bin_to_images(sourcepath,destpath):
    files = os.listdir(sourcepath)

    for file in files:
        if file.endswith('.bin'):
            f = codecs.open(sourcepath+'\\'+file, 'rb')
            ln = os.path.getsize(sourcepath+'\\'+file)
            width = int(ln**0.5)
            a = array.array("B")
            a.frombytes(f.read())
            f.close()
            g = np.reshape(a[:width*width], (width, width))
            g = np.uint8(g)
            cv2.imwrite(destpath+'\\'+file+'.png', g)
    print('Files converted sucessfully')


def set_img_size(destpath):
    files = glob.glob(destpath+'\\'+'*.png')
    
    for file in files:
        img = cv2.imread(file)
        img_resize = cv2.resize(img, (256, 256), interpolation = cv2.INTER_AREA)
        img = Image.fromarray(img_resize)
        img.save(file)

#load_apk_file(f'D:\\Malware\\kakaobank')



if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('-d', help=':샘플들이 존재하는 파일 경로')
    parser.add_argument('-s', help=':1차결과물이 저장될 파일 경로')
    parser.add_argument('-o' , help=':png결과물이 저장될 파일 경로')
    args = parser.parse_args()
    sample_dir = args.d
    result_dir = args.s
    png_result_dir = args.o
    start_time = time.time()

    
    load_apk_file(sample_dir,result_dir)
    convert_bin_to_images(result_dir,png_result_dir)
    set_img_size(png_result_dir)
    print('done')
