import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn import metrics
from sklearn.metrics import classification_report
from sklearn.metrics import confusion_matrix
from sklearn.metrics import accuracy_score, recall_score, roc_auc_score,precision_score , f1_score

data = pd.read_csv('dataset.csv')
x = data.drop(['class'], axis=1)
y = data['class']
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2)

def classifier_eval(y_test, y_pred):
  # print('오차: ', confusion_matrix(y_test, y_pred))
  print('정확도: %.2f' % (accuracy_score(y_test, y_pred) * 100))
  print('정밀도: %.2f' % (precision_score(y_test, y_pred) * 100))
  print('재현율: %.2f' % (recall_score(y_test, y_pred) * 100))
  print('F1 score: %.2f' % (f1_score(y_test, y_pred) * 100))
  print()

# SVM
model = svm.SVC(gamma='scale')
model.fit(x_train, y_train)
y_pred = model.predict(x_test)
print('SVM')
classifier_eval(y_test, y_pred)
print(metrics.classification_report(y_test, y_pred))

# DecisionTreeClassifier
model = DecisionTreeClassifier()
model.fit(x_train, y_train)
y_pred = model.predict(x_test)
print('DecisionTreeClassifier')
classifier_eval(y_test, y_pred)
print(metrics.classification_report(y_test, y_pred))

# KNeighborsClassifier
model = KNeighborsClassifier()
model.fit(x_train, y_train)
y_pred = model.predict(x_test)
print('KNeighborsClassifier')
classifier_eval(y_test, y_pred)
print(metrics.classification_report(y_test, y_pred))

# LogisticRegression
model = LogisticRegression(solver='lbfgs', max_iter=2000)
model.fit(x_train, y_train)
y_pred = model.predict(x_test)
print('LogisticRegression')
classifier_eval(y_test, y_pred)
print(metrics.classification_report(y_test, y_pred))

# RandomForestClassifier
model = RandomForestClassifier(n_estimators=100)
model.fit(x_train, y_train)
y_pred = model.predict(x_test)
print('RandomForestClassifier')
classifier_eval(y_test, y_pred)
print(metrics.classification_report(y_test, y_pred))