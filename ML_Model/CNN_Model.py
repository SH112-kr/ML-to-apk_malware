# -*- coding: utf-8 -*-
"""ImageModelCNN2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1p68_Swo-sV44Bs34l2YgDbZWV2rhSPe5
"""



from google.colab import drive
drive.mount('/content/drive')

import tensorflow as tf
import numpy as np
import os
import scipy
import keras
from keras.layers import Input, Conv2D, MaxPooling2D, Flatten, Dropout, Dense, LSTM, TimeDistributed, RepeatVector, BatchNormalization
from keras.models import Model, Sequential
from keras import regularizers
# from tensorflow.keras import layers, models 
# from tensorflow.keras.optimizers import Adam
import PIL.Image as Image
from keras.preprocessing import image

IMAGE_WIDTH = 256
IMAGE_HEIGHT = 256
IMAGE_SHAPE = (IMAGE_WIDTH, IMAGE_HEIGHT)
BATCH_SIZE = 16

def cnn_model():
    model = keras.models.Sequential()
    model.add(Conv2D(filters = 128, kernel_size = (5,5), activation= 'relu', input_shape = (256, 256, 3)))
    model.add(MaxPooling2D(pool_size = (2,2), strides = (2,2)))
    model.add(Dropout(0.2))

    model.add(Conv2D(64, (3,3), activation='relu'))
    model.add(MaxPooling2D(pool_size=(2,2), strides = (2,2), padding='same'))
    model.add(Dropout(0.2))

    model.add(Conv2D(32, (3,3), activation = 'relu'))
    model.add(MaxPooling2D(pool_size = (2,2), strides=(1,1), padding='same'))
    model.add(Dropout(0.2))

    model.add(Conv2D(28, (2,2), activation = 'relu'))
    model.add(MaxPooling2D(pool_size = (2,2), strides=(1,1), padding='same'))
    model.add(Dropout(0.2))

    model.add(Flatten())
    model.add(Dropout(0.2))
    model.add(Dense(128, activation = 'relu'))
    model.add(Dense(64, activation = 'relu'))
    model.add(Dense(32, activation = 'relu'))
    model.add(Dense(1, activation = 'sigmoid'))
    return model

train_gen = image.ImageDataGenerator(horizontal_flip = True,
                              rotation_range = 35,
                              rescale = 1./255,
                              zoom_range = [0.7,1.5],
                              brightness_range = (0.7,1.0),
                              width_shift_range = 0.1,
                              height_shift_range = 0.1) 

VT_gen = image.ImageDataGenerator(rescale = 1./255)

batch_size = 16
# 실제 경로만 맞춰주면 됨.
train_genorator = VT_gen.flow_from_directory("/content/drive/MyDrive/cnn2/train/", target_size = IMAGE_SHAPE, batch_size = batch_size , class_mode='binary',color_mode='rgb')
val_genorator = VT_gen.flow_from_directory("/content/drive/MyDrive/cnn2/valid/", shuffle = False, target_size = IMAGE_SHAPE, batch_size = batch_size, class_mode='binary',color_mode='rgb')
test_genorator = VT_gen.flow_from_directory("/content/drive/MyDrive/cnn2/test/", shuffle = False, target_size = IMAGE_SHAPE, batch_size = batch_size, class_mode='binary',color_mode='rgb')

print(train_genorator)

model = cnn_model()
model.compile(loss='binary_crossentropy', optimizer = 'adam', metrics=['accuracy'])
print("="*30)
print("model shape")
print("="*30)
print(model.summary())

print("[>] fitting start!!!!")
model.fit(train_genorator, epochs = 10, validation_data = val_genorator)

X_pred = model.predict(test_genorator)
X_accurancy=model.evaluate(test_genorator)
print(X_pred)
print(X_accurancy)
model.save('cnn1.h5')